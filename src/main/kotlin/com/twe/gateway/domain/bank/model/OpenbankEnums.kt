package com.tw2.prepaid.domain.bank.model

import com.fasterxml.jackson.annotation.JsonValue
import com.tw2.prepaid.common.EMPTY_MESSAGE
import com.tw2.prepaid.common.error.ErrorCode

const val PERSONAL_ACCOUNT_HOLDER_TYPE = 'P'
enum class OpenbankTransferCheckType(@JsonValue val code: String) {
    WITHDRAW("1"), DEPOSIT("2")
}
enum class OpenbankAccountStateType(@JsonValue val code: String) {
    USE("01"), TERMINATION("09");
}
enum class OpenbankAccountType(@JsonValue val code: Char) {
    수시입출금('1'),
    예적금('2'),
    수익증권('6'),
    종합계좌('T');
}
enum class OpenbankCntrAccountType(@JsonValue val code: Char) {
    ACCOUNT('N'), // default
    ID('C')
}
// 오픈뱅킹 api 에서 소문자로 쓰고 있어서 이렇게 해둠
enum class OpenbankAccountRegisterType {
    transfer, inquiry
}
enum class OpenbankAgreementType(@JsonValue val code: Char) {
    서면('1'), 공동금융전자문서('2'),
    일반전자문서('3'), 녹취('4'),
    ARS('5'), 사설전자문서('7'),
    기타('6')
}
enum class OpenBankApiResponseCode(
    val errorCode: ErrorCode = ErrorCode.오픈뱅킹에러,
    val message: String,
    val isErrorLog: Boolean = true,
) {
    `A0000`(message = "처리 성공", isErrorLog = false, errorCode = ErrorCode.SUCCESS),
    `A0001`(message = "처리 중(이체결과조회 요망, 이체 시)", errorCode = ErrorCode.PROCESSING_BANK_TRANSFER),
    `A0002`(message = "참가은행 에러") {
        override fun getDetailedMessage(key: String) =
            ParticipatingBankResponseCode.values().find { it.name == key }?.message ?: EMPTY_MESSAGE
        override fun getDetailedErrorCode(key: String) =
            ParticipatingBankResponseCode.values().find { it.name == key }?.errorCode ?: ErrorCode.FAILURE
        override fun getIsErrorLog(key: String) = ParticipatingBankResponseCode.values().find { it.name == key }?.isErrorLog ?: true
    },
    `A0003`(message = "내부 처리 에러", errorCode = ErrorCode.PROCESSING_BANK_TRANSFER),
    `A0004`(message = "요청전문 포맷 에러"),
    `A0005`(message = "등록 데이터 에러"),
    `A0006`(message = "전문 변환 에러"),
    `A0007`(message = "처리시간 초과 에러", errorCode = ErrorCode.PROCESSING_BANK_TRANSFER),
    `A0008`(message = "중복거래 에러"),
    `A0009`(message = "API 세부업무 처리실패(리스트 건별 처리결과 확인)"),
    `A0010`(message = "이용기관 APP 정보 확인 실패"),
    `A0011`(message = "이용기관 API 사용권한 없음"),
    `A0012`(message = "API 정보 확인 실패"),
    `A0013`(message = "이용기관 서비스 사용 불가"),
    `A0014`(message = "탈퇴 회원"),
    `A0015`(message = "시뮬레이터 응답전문 존재하지 않음"),
    `A0016`(message = "내부 전문 송신 실패"),
    `A0017`(message = "참가은행 응답전문 TIMEOUT", errorCode = ErrorCode.PROCESSING_BANK_TRANSFER),
    `A0018`(message = "거래내역 없음"),
    `A0019`(message = "사용자탈퇴 처리중인 계좌"),
    `A0020`(message = "조회 가능시간 아님"),
    `A0021`(message = "오픈뱅킹센터 지정 에러메시지 ※ 응답메시지(API) 항목에 자세한 내용이 설정되며, 이용기관은 반드시 해당 내용을 사용자에게 표시해야함"),
    `A0101`(message = "이용기관 입금이체 한도 초과(일 한도)", isErrorLog = false),
    `A0102`(message = "이용기관 입금이체 한도 초과(월 한도)", isErrorLog = false),
    `A0103`(message = "이용기관 출금이체 한도 초과(일 한도)", isErrorLog = false),
    `A0104`(message = "이용기관 출금이체 한도 초과(월 한도)", isErrorLog = false),
    `A0105`(message = "이용기관 출금이체 한도 초과(건당 한도)", isErrorLog = false),
    `A0106`(message = "이용기관 입금이체 한도 초과(건당 한도)", isErrorLog = false),
    `A0111`(message = "사용자 출금이체 한도 초과(건당 한도)", isErrorLog = false),
    `A0112`(message = "사용자 출금이체 한도 초과(일 한도)", isErrorLog = false),
    `A0301`(message = "접근 권한 없음"),
    `A0302`(message = "참가은행 API 이용권한 없음"),
    `A0303`(message = "등록된 이용기관 수수료 정책 없음"),
    `A0304`(message = "핀테크이용번호 정보 불일치"),
    `A0305`(message = "제3자정보제공동의 미완료"),
    `A0306`(message = "출금동의 미완료 ※ 이용기관에서 출금동의여부가 ‘Y’인 경우, 해당 응답코드를 수신 후 출금동의 해지 처리 가능"),
    `A0307`(message = "이체암호문구 불일치"),
    `A0308`(message = "처리대행비용 할인대상 여부 없음"),
    `A0309`(message = "등록된 이용기관 수수료 정보 없음"),
    `A0310`(message = "이체 내역 없음"),
    `A0311`(message = "등록된 처리대행 수수료 정보 없음"),
    `A0312`(message = "예금주명 불일치"),
    `A0313`(message = "사용자 불일치"),
    `A0314`(message = "계좌이동 중"),
    `A0315`(message = "농협중앙회(단위농축협) 계좌번호를 입력했을 경우 오류 처리"),
    `A0316`(message = "금융(거래)정보 제3자제공동의 만료"),
    `A0317`(message = "미등록 수취계좌"),
    `A0318`(message = "수취계좌 사업자등록번호 상이"),
    `A0319`(message = "출금동의 만료"),
    `A0320`(message = "실명번호(전체) 조회 권한 없음"),
    `A0321`(message = "예금주 실명번호 구분코드와 실명번호의 형식(자리수) 불일치"),
    `A0322`(message = "미등록된 이용기관 약정 계좌/계정"),
    `A0323`(message = "이용기관에 등록된 사용자 계좌 아님"),
    `A0324`(message = "기등록된 조회서비스용 사용자 계좌", isErrorLog = false, errorCode = ErrorCode.SUCCESS),
    `A0325`(message = "기등록된 출금서비스용 사용자 계좌", isErrorLog = false, errorCode = ErrorCode.SUCCESS),
    `A0326`(message = "은행거래고유번호 중복 ※ 본 응답코드는 이용기관에서 잘못하여 은행거래고유번호를 중복 생성한 경우에 발생하므로 이용기관은 반드시 원인을 파악하여 조치 필요"),
    `A0327`(message = "출금한도 미협의 은행 (이용기관 문의)"),
    `O0001`(message = "인증요청 거부-인증 파라미터 오류([error_code])"),
    `O0002`(message = "Access Token 거부"),
    `O0003`(message = "Access Token 만료"),
    `O0004`(message = "API 접근권한이 없음 (API 서비스를 신청하지 않았을 때)"),
    `O0005`(message = "허용되지 않은 API 접근 입니다. (API 서비스가 없을 때)"),
    `O0006`(message = "허용되지 않은 IP 입니다."),
    `O0007`(message = "API를 요청 또는 처리할 수 없습니다. (API 업무처리 Routing 실패 시)"),
    `O0008`(message = "Account Plan 사용량 한도 초과"),
    `O0009`(message = "API Plan 사용량 한도 초과"),
    `O0010`(message = "허용되지 않은 HTTP method 입니다."),
    `O0011`(message = "허용되지 않은 Scope 입니다."),
    `O0012`(message = "중계센터 처리지연 (잠시 후 재거래 요망)"),
    `O0013`(message = "이용기관에서 과도하게 API를 호출하였습니다."),
    `O0014`(message = "Refresh Token 거부"),
    `O0015`(message = "Refresh Token 만료");
    open fun getDetailedMessage(key: String = EMPTY_MESSAGE) = message
    open fun getDetailedErrorCode(key: String = EMPTY_MESSAGE) = errorCode
    open fun getIsErrorLog(key: String = EMPTY_MESSAGE): Boolean = isErrorLog
}
enum class ParticipatingBankResponseCode(
    val errorCode: ErrorCode = ErrorCode.오픈뱅킹에러,
    val message: String,
    val isErrorLog: Boolean = true
) {
    `000`(message = "정상", isErrorLog = false, errorCode = ErrorCode.SUCCESS),
    `111`(message = "출금(개설)기관 SYSTEM 장애"),
    `112`(message = "출금(개설)기관 개시 이전"),
    `113`(message = "출금(개설)기관 업무 종료"),
    `114`(message = "출금(개설)기관 서비스 시간 아님"),
    `115`(message = "출금(개설)기관 처리지연으로 거부(잠시 후 거래 요망)"),
    `121`(message = "중계센터 SYSTEM 장애"),
    `122`(message = "중계센터 종료"),
    `141`(message = "입금기관 SYSTEM 장애"),
    `142`(message = "입금기관 개시 이전"),
    `143`(message = "입금기관 업무 종료"),
    `145`(message = "입금기관 처리지연으로 거부(잠시 후 거래요망)"),
    `146`(message = "처리지연으로 거부(잠시 후 거래요망)"),
    `150`(message = "미참가 기관"),
    `152`(message = "개설기관 수신전문 오류"),
    `311`(message = "TIME OVER(응답대기시간 경과)", errorCode = ErrorCode.PROCESSING_BANK_TRANSFER),
    `312`(message = "기관지정 에러메시지"),
    `313`(message = "요청전문 포맷 에러"),
    `400`(message = "입금 처리 중", errorCode = ErrorCode.PROCESSING_BANK_TRANSFER),
    `401`(message = "이체 전 처리결과 조회 수신으로 거부"),
    `402`(message = "수취 조회 거래고유번호 검색 실패"),
    `403`(message = "수취 조회 정보 불일치"),
    `999`(message = "순이체한도 초과", isErrorLog = false),
    `411`(message = "과목코드 오류"),
    `412`(message = "해당계좌 없음(전출, 잡좌통할, 특별계좌 포함)"),
    `413`(message = "통장 분실 재발행계좌"),
    `414`(message = "이관 계좌"),
    `415`(message = "해약 계좌"),
    `416`(message = "잡좌"),
    `417`(message = "비실명계좌"),
    `418`(message = "보안계좌"),
    `419`(message = "사고신고 계좌"),
    `420`(message = "거래중지 계좌"),
    `421`(message = "법인계좌 사용불가"),
    `422`(message = "타행처리 불가계좌"),
    `423`(message = "투자자예탁금 계좌 아님"),
    `424`(message = "연체계좌"),
    `425`(message = "법적등록계좌(압류,가압류,예금주사망등 기타)"),
    `426`(message = "압류금지 전용 계좌로 입금불가"),
    `427`(message = "기타 출금불가 계좌 (해당 지점 연락요망)"),
    `428`(message = "동의서 미징구 계좌"),
    `429`(message = "가상계좌 입금시간 아님"),
    `430`(message = "예약금융상품 온라인 입금불가"),
    `431`(message = "잔액 및 부채증명 발급계좌"),
    `432`(message = "통장정리후 거래(무통건수 초과)"),
    `433`(message = "인감분실"),
    `434`(message = "총금액 상위"),
    `435`(message = "불입금 상위(1회 불입단위가 있는 경우)"),
    `436`(message = "불입횟수 초과(해당 지점 연락요망)"),
    `437`(message = "입금한도 초과"),
    `451`(message = "지급횟수 초과"),
    `452`(message = "비밀번호 입력횟수 초과"),
    `453`(message = "예금잔액 부족", isErrorLog = false),
    `454`(message = "출금가능잔액 부족", isErrorLog = false),
    `455`(message = "건별 이체한도 초과"),
    `456`(message = "일일 이체한도 초과"),
    `457`(message = "대월한도 초과(대월잔액 부족)"),
    `458`(message = "30분간 지연인출(이체) 대상"),
    `459`(message = "CMS번호 기재 요망"),
    `460`(message = "CMS번호 상위"),
    `461`(message = "의뢰인 성명 오류(해당 지점 연락요망)"),
    `462`(message = "고객 앞 통지 반송 계좌(해당 지점 연락요망)"),
    `463`(message = "실명번호 상위"),
    `464`(message = "사용자 등록 정보 이상(기 해지, 동의정보 상위 등)"),
    `465`(message = "실명번호 구분코드가 계좌에 등록된 실명번호와 불일치 ※ 본 응답코드는 ‘계좌실명 조회’ 전문에만 사용 가능"),
    `466`(message = "계좌 등록 실명번호가 생년월일로 시작하지 않음 ※ 본 응답코드는 ‘사용자 등록’ 및 ‘계좌실명 조회’ 전문에만 사용 가능"),
    `467`(message = "장기 미사용 계좌"),
    `480`(message = "이용기관 정보 주거래기관 등록 이상"),
    `481`(message = "가상계좌 처리 불가"),
    `482`(message = "예적금계좌 처리 불가"),
    `483`(message = "수익증권계좌 처리 불가"),
    `484`(message = "회차번호 미입력※ 회차번호가 필요한 계좌이나, 회차번호가 미입력된 경우"),
    `485`(message = "회차번호 입력 불가 계좌 ※ 회차번호가 불필요한 계좌이나, 회차번호가 입력된 경우"),
    `486`(message = "회차번호 불일치 ※ ‘계좌번호’+‘회차번호’ 조합으로 관리되는 계좌가 없는 경우"),
    `499`(message = "기타 처리불가(해당 지점 연락요망)"),
    `501`(message = "조회 가능기간 경과"),
    `502`(message = "조회 대상 거래내역 없음"),
    `551`(message = "기 해지 사용자"),
    `552`(message = "계좌명의 구분 상위"),
    `553`(message = "생년월일 상위"),
    `554`(message = "기타 사용자 등록 불가 계좌(해당 지점 연락요망)"),
    `555`(message = "해당 사용자 없음"),
    `556`(message = "사용자 미등록"),
    `601`(message = "원거래 없음"),
    `602`(message = "기 취소된 거래임(정상취소)"),
    `603`(message = "원거래 불명(원거래 비정상)"),
    `607`(message = "원거래 계좌번호 상위"),
    `608`(message = "원거래 금액 상위"),
    `609`(message = "원거래 기타 사항 상위"),
    `701`(message = "조회 대상거래 없음", errorCode = ErrorCode.PROCESSING_BANK_TRANSFER),
    `900`(message = "청구 접수 처리 중"),
    `901`(message = "기 반환 거래"),
    `902`(message = "원거래 없음"),
    `903`(message = "거래금액 상위"),
    `904`(message = "거래구분코드 상위"),
    `905`(message = "수취 계좌번호 상위"),
    `906`(message = "기타사항 상위"),
    `907`(message = "자금청구 접수 내역 존재"),
    `908`(message = "자금청구 접수 전 자금청구 확인 수신으로 거부"),
    `801`(message = "등록 데이터 에러"),
    `802`(message = "전문 변환 에러"),
    `803`(message = "내부 처리 에러"),
    `804`(message = "처리시간 초과 에러"),
    `805`(message = "중복거래 에러"),
    `806`(message = "참가은행 API 이용권한 없음"),
    `807`(message = "핀테크이용번호 정보 불일치"),
    `808`(message = "제3자정보제공동의 미완료"),
    `809`(message = "출금동의 미완료"),
    `810`(message = "이체비밀번호 불일치"),
    `811`(message = "처리대행비용 할인 대상 여부 정보 없음"),
    `812`(message = "등록된 이용기관 수수료 정보 없음"),
    `813`(message = "이체 내역 없음"),
    `814`(message = "등록된 처리대행 수수료 정보 없음"),
    `815`(message = "예금주명 불일치"),
    `816`(message = "탈퇴 회원"),
    `817`(message = "사용자 불일치"),
    `818`(message = "시뮬레이터 응답전문 존재하지 않음", errorCode = ErrorCode.SUCCESS),
    `819`(message = "내부 전문 송신 실패"),
    `820`(message = "농협중앙회(단위농축협) 계좌번호를 입력했을 경우 거절처리"),
    `821`(message = "금융(거래)정보 제3자제공동의 만료"),
    `822`(message = "은행거래고유번호 중복 ※ 본 응답코드는 이용기관에서 잘못하여 은행거래고유번호를 중복 생성한 경우에 발생하므로 이용기관은 반드시 원인을 파악하여 조치 필요"),
}